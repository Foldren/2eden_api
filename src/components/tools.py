from datetime import timedelta, datetime
from aiogram.utils.web_app import safe_parse_webapp_init_data, WebAppInitData
from fastapi import HTTPException, Security
from fastapi.security import APIKeyHeader
from httpx import Response
from pytz import timezone
from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_404_NOT_FOUND
from config import TOKEN
from models import User, Reward, Task, RankVisibility, RewardType, VisibilityType
from better_profanity import profanity
from spellchecker import SpellChecker


async def get_daily_reward(user: User) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ—Ä–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π –≤ –∏–≥—Ä–µ.
    :param user: User –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–≤—à–µ–≥–æ—Å—è —é–∑–µ—Ä–∞ —Å "activity"
    """
    dt_after_get_rw = datetime.fromisoformat(user.activity.last_daily_reward.isoformat()).replace(tzinfo=timezone("Europe/Moscow"))
    dt_last_login = datetime.fromisoformat(user.activity.last_login_date.isoformat()).replace(tzinfo=timezone("Europe/Moscow"))

    time_d_after_get_reward = datetime.now(tz=timezone("Europe/Moscow")) - dt_after_get_rw
    time_d_after_last_login = datetime.now(tz=timezone("Europe/Moscow")) - dt_last_login

    if timedelta(days=2) > time_d_after_get_reward > timedelta(days=1):
        user.activity.active_days += 1
        user.activity.last_daily_reward = datetime.now(tz=timezone("Europe/Moscow"))

        match user.activity.active_days:
            case 1:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=500)
            case 2:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=1000)
            case 3:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=1000,
                                    inspirations=1)
            case 4:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=1000,
                                    inspirations=1, replenishments=1)
            case 5:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=1000,
                                    inspirations=2, replenishments=1)
            case 6:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=5000,
                                    inspirations=2, replenishments=2)
            case 7:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=10000,
                                    inspirations=2, replenishments=2)
            case _:
                await Reward.create(type=RewardType.LAUNCHES_SERIES, user_id=user.id, amount=10000,
                                    inspirations=2, replenishments=2)

    elif timedelta(days=2) <= time_d_after_last_login:
        user.activity.active_days = 0
        user.activity.last_daily_reward = datetime.now(tz=timezone("Europe/Moscow"))

    user.activity.last_login_date = datetime.now(tz=timezone("Europe/Moscow"))
    await user.activity.save()


async def get_referral_reward(lead: User, referral_code: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.
    :param lead: –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ User –ª–∏–¥–∞
    :param referral_code: –∫–æ–¥ –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    """
    referrer = await User.filter(referral_code=referral_code).select_related("stats").first()
    if referrer:
        lead.referrer_id = referrer.id
        await lead.save()

        referrer.stats.invited_friends += 1
        await referrer.stats.save()

        match referrer.stats.invited_friends:
            case 1:
                await Reward.create(type=RewardType.INVITE_FRIENDS, user_id=referrer.id, amount=2000)
            case 5:
                await Reward.create(type=RewardType.INVITE_FRIENDS, user_id=referrer.id, amount=5000)
            case 100:
                await Reward.create(type=RewardType.INVITE_FRIENDS, user_id=referrer.id, amount=50000)
            case 1000:
                await Reward.create(type=RewardType.INVITE_FRIENDS, user_id=referrer.id, amount=250000)


async def send_referral_mining_reward(extraction: int, referrer_id: int = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å –¥–æ–±—ã—á–∏ –ø–æ –º–∞–π–Ω–∏–Ω–≥—É —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä—É.
    :param referrer_id: –∞–π–¥–∏ —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞
    :param extraction: –¥–æ–±—ã—á–∞ —Å –º–∞–π–Ω–∏–Ω–≥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    """

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞ —Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
    print("mining refererer id" + str(referrer_id))
    if referrer_id is None:
        return

    referrer_rw = await Reward.filter(user_id=referrer_id, type=RewardType.MINING_REFERRAL).first()
    income_5_perc = int(extraction * 0.05)

    if referrer_rw is not None:
        referrer_rw.amount += income_5_perc
        await referrer_rw.save()
    else:
        await Reward.create(user_id=referrer_id, type=RewardType.MINING_REFERRAL, amount=income_5_perc)

    referrer_upper = await User.filter(id=referrer_id).first()
    referrer_upper_id = referrer_upper.referrer_id

    # –ï—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞ —Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
    if referrer_upper_id is None:
        return

    referrer_upper_rw = await Reward.filter(user_id=referrer_upper_id, type=RewardType.MINING_REFERRAL).first()
    income_1_perc = int(extraction * 0.01)

    if referrer_upper_rw is not None:
        referrer_upper_rw.amount += income_1_perc
        await referrer_upper_rw.save()
    else:
        await Reward.create(user_id=referrer_upper_id, type=RewardType.MINING_REFERRAL, amount=income_1_perc)


async def sync_energy(user: User) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏. –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –º–µ–Ω—è–µ—Ç –∫–æ–ª-–≤–æ —ç–Ω–µ—Ä–≥–∏–∏.
    :param user: –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ User —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏: activity, stats, rank
    """
    dt_last_sync_energy = datetime.fromisoformat(user.activity.last_sync_energy.isoformat())
    secs_from_last_sync = (datetime.now(tz=timezone("Europe/Moscow")) - dt_last_sync_energy).seconds

    accumulated_energy = max(secs_from_last_sync, 1) * user.rank.energy_per_sec
    user.stats.energy += accumulated_energy

    if user.stats.energy > user.rank.max_energy:
        user.stats.energy = user.rank.max_energy

    user.activity.last_sync_energy = datetime.now(tz=timezone("Europe/Moscow"))

    await user.stats.save()
    await user.activity.save()


async def check_task_visibility(task: Task, user: User):
    if task.visibility.type == VisibilityType.RANK:
        rank_visibility = await RankVisibility.get(visibility=task.visibility)
        return user.rank.league >= rank_visibility.rank.league

    elif task.visibility.type == VisibilityType.ALLWAYS:
        return True

    return False


async def assert_status_code(response: Response, status_code: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ assert –ø–æ status code, –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
    :param response: httpx.Response
    :param status_code: Starlette.status
    """
    frmt_text = f"[Message: {response.json()["message"]["text"]}]"
    assert response.status_code == status_code, frmt_text
    print(frmt_text)  # –≠—Ç–æ –Ω—É–∂–Ω—ã–π –≤—ã–≤–æ–¥


async def validate_telegram_hash(
        x_telegram_init_data: str = Security(APIKeyHeader(name="X-Telegram-Init-Data"))) -> WebAppInitData:
    """
    Fastapi Depend –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ telegram hash —é–∑–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç init_data, –µ—Å–ª–∏ –≤—Å–µ –æ–∫–µ–π.
    :param x_telegram_init_data: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å window.Telegram.WebApp.initData
    :return:
    """
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º init data tg —é–∑–µ—Ä–∞
    try:
        init_data = safe_parse_webapp_init_data(token=TOKEN, init_data=x_telegram_init_data)
        user = await User.filter(id=init_data.user.id).first()

        if user:
            return init_data
        else:
            raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail="–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start.")

    except ValueError:
        raise HTTPException(status_code=HTTP_401_UNAUTHORIZED, detail="–î–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ Telegram –Ω–µ –≤–∞–ª–∏–¥–Ω—ã.")


async def ai_msg_base_check(question: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–¥–ª–∏–Ω–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞, –º–∞—Ç).
    :param question: –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç
    """
    profanity.load_censor_words(whitelist_words=["god"])  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
    spell = SpellChecker(language='en')  # —Å–ø–µ–ª–ª –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
    corrects_words = [spell.correction(word) for word in question.split()]  # —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤

    assert None not in corrects_words, "‚ùì –Ø –Ω–µ –º–æ–≥—É –ø—Ä–æ—á–µ—Å—Ç—å —Ç–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –ø–æ—Å–ª—É—à–Ω–∏–∫ –º–æ–π."
    assert len(question) >= 10, "üåÄ –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–∫–æ–ª–∏—Ç."
    assert len(question.split()) >= 2, "üëÅ‚Äçüó® –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞–∫–æ–ª–∏—Ç."
    assert "*" not in profanity.censor(question), "üí¢ –ü–æ—Å–ª—É—à–Ω–∏–∫ –º–æ–π, –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç –≤ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è—Ö!"
