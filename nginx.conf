worker_processes auto;

events {}

http {
    keepalive_timeout 45;
    reset_timedout_connection on;
    client_body_timeout 35;
    send_timeout 30;
    # определяем зоны и лимиты
    limit_conn_zone $binary_remote_addr zone=connect:5m;
    # выставляем интенсивность `rate` не более 3 запросов в секунду
    # с одного IP, что бы не блокировать роботов yandex и google.
    limit_req_zone $binary_remote_addr zone=requests:5m rate=3r/s;

    # Можно также использовать как балансировщик нагрузки, указав
    # несколько серверов
    upstream fastapi {
       server api:8000;
    }

    server {
        listen 80;

        # Блокируем менеджеры загрузки
        if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
            return 403;
        }
        # Блокируем некоторые типы ботов
        if ($http_user_agent ~* msnbot|scrapbot) {
            return 403;
        }

        # Блокируем Referrer-спам
        if ($http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen)) {
            return 403;
        }

        location / {
            proxy_pass http://fastapi;

            # прописываем лимит одновременных подключений с одного IP-адреса
            # допускаем, что с одного IP могут подключиться до 5 пользователей
            limit_conn connect 5;

            # лимит количества запросов с одного IP прописан при создании зоны (см. выше),
            # следующая строка определяет какой может быть кратковременный всплеск
            # запросов `burst` (не может быть меньше `limit_conn`) и как его обрабатывать.
            # Ставить в очередь на  обработку (delay=число запросов) или отклонять (nodelay).
            limit_req zone=requests burst=5 nodelay;

            # определяем HTTP ошибку 429 (Too Many Requests), которая будет
            # показываться клиентам при нарушении лимитов, установленных выше.
            limit_conn_status 429;
            limit_req_status 429;

#             location ~^/(admin|docs) {
#                 allow 1.1.1.1/32;
#                 deny all;
#             }
        }
    }
}
